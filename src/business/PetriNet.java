/* Copyright Davain Pablo Edwards core8@gmx.net. Licensed https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en */
package business;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/**
 * This class represents a Petri Net, which is a mathematical model used to describe
 * systems with concurrent processes, such as distributed systems and workflows.
 * It contains places, transitions, input arcs, output arcs, and other elements that
 * define the structure and behavior of the Petri Net.
 *
 * The Petri Net class manages these elements and provides methods for adding and
 * removing them. It also stores additional information such as import text,
 * declaration text, and implement text, which can be used for code generation.
 *
 * The class provides methods for checking whether the Petri Net has enabled transitions
 * and for accessing various lists of elements within the Petri Net.
 */
public class PetriNet extends NetObject {

    /** Contains all places of the net. */
    private ArrayList<Place> places = new ArrayList<>();
    /** Contains all transitions of the net. */
    private ArrayList<Transition> transitions = new ArrayList<>();
    /** Contains all input arcs of the net. */
    private ArrayList<InputArc> inputArcs = new ArrayList<>();
    /** Contains all output arcs of the net. */
    private ArrayList<OutputArc> outputArcs = new ArrayList<>();
    /** Contains all net objects of the net. */
    private HashMap<String, NetObject> netElements = new HashMap<>();
    /** String that represents the classes and libraries that will be imported in the autogenerated class. */
    private String importText = "";
    /** String that represents the methods and attributes that will be created in the autogenerated class. */
    private String declarationText = "";
    /** String that represents the classes and libraries that will be implemented by the autogenerated class. */
    private String implementText = "";

    /** PetriNet constructor */
    public PetriNet() {
        this.label = "Untitled" + this.id;
        this.id = "n" + this.id;
    }

    /** Checks whether the Petri Net has enabled transitions */
    public boolean isDead() {
        boolean isDead = true;
        Iterator<Transition> i = getTransitions().iterator();
        while (isDead && i.hasNext()) {
            Transition transition = i.next();
            isDead = !(transition.enabled(0));
        }
        return isDead;
    }

    /** Adds a place to this net */
    public void addPlace(Place place) {
        this.places.add(place);
        this.netElements.put(place.getId(), place);
    }

    /** Adds a transition to this net */
    public void addTransition(Transition transition) {
        this.transitions.add(transition);
        this.netElements.put(transition.getId(), transition);
    }

    /** Adds an input arc to this net */
    public void addInputArc(InputArc inputArc) {
        this.inputArcs.add(inputArc);
        this.netElements.put(inputArc.getId(), inputArc);
    }

    /** Adds an output arc to this net */
    public void addOutputArc(OutputArc outputArc) {
        this.outputArcs.add(outputArc);
        this.netElements.put(outputArc.getId(), outputArc);
    }

    /** Removes a place from this net */
    public void removePlace(Place place) {
        this.removeInputArcs(place.getId());
        this.removeOutputArcs(place.getId());
        this.places.remove(place);
        this.netElements.remove(place.getId());
    }

    /** Removes a transition from this net */
    public void removeTransition(Transition transition) {
        this.removeInputArcs(transition.getId());
        this.removeOutputArcs(transition.getId());
        this.transitions.remove(transition);
        this.netElements.remove(transition.getId());
    }

    /** Removes an input arc from this net */
    public void removeInputArc(InputArc inputArc) {
        this.inputArcs.remove(inputArc);
        this.netElements.remove(inputArc.getId());
    }

    /** Removes an output arc from this net */
    public void removeOutputArc(OutputArc outputArc) {
        this.outputArcs.remove(outputArc);
        this.netElements.remove(outputArc.getId());
    }

    /** Removes all input arcs that connect to this netObject id */
    public void removeInputArcs(String id) {
        Iterator<InputArc> it = getInputArcs().iterator();
        while (it.hasNext()) {
            InputArc inputArc = it.next();
            if (id.equals(inputArc.getPlace().getId())) {
                it.remove();
            }
        }
    }

    /** Removes all output arcs that connect to this netObject id */
    public synchronized void removeOutputArcs(String id) {
        Iterator<OutputArc> it = getOutputArcs().iterator();
        while (it.hasNext()) {
            OutputArc outputArc = it.next();
            if (id.equals(outputArc.getPlace().getId())) {
                it.remove();
            }
        }
    }

    /**
     * Gets the list of places in the Petri Net.
     *
     * @return The list of places.
     */
    public ArrayList<Place> getPlaces() {
        return places;
    }

    /**
     * Sets the list of places in the Petri Net.
     *
     * @param places The list of places to set.
     */
    public void setPlaces(ArrayList<Place> places) {
        this.places = places;
    }

    /**
     * Gets the list of transitions in the Petri Net.
     *
     * @return The list of transitions.
     */
    public ArrayList<Transition> getTransitions() {
        return transitions;
    }

    /**
     * Sets the list of transitions in the Petri Net.
     *
     * @param transitions The list of transitions to set.
     */
    public void setTransitions(ArrayList<Transition> transitions) {
        this.transitions = transitions;
    }

    /**
     * Gets the list of input arcs in the Petri Net.
     *
     * @return The list of input arcs.
     */
    public ArrayList<InputArc> getInputArcs() {
        return inputArcs;
    }

    /**
     * Sets the list of input arcs in the Petri Net.
     *
     * @param inputArcs The list of input arcs to set.
     */
    public void setInputArcs(ArrayList<InputArc> inputArcs) {
        this.inputArcs = inputArcs;
    }

    /**
     * Gets the list of output arcs in the Petri Net.
     *
     * @return The list of output arcs.
     */
    public ArrayList<OutputArc> getOutputArcs() {
        return outputArcs;
    }

    /**
     * Sets the list of output arcs in the Petri Net.
     *
     * @param outputArcs The list of output arcs to set.
     */
    public void setOutputArcs(ArrayList<OutputArc> outputArcs) {
        this.outputArcs = outputArcs;
    }

    /**
     * Gets the map of net elements in the Petri Net.
     *
     * @return The map of net elements.
     */
    public HashMap<String, NetObject> getNetElements() {
        return this.netElements;
    }

    /**
     * Gets a specific net element in the Petri Net by its ID.
     *
     * @param id The ID of the net element to retrieve.
     * @return The net element with the specified ID.
     */
    public NetObject getNetElement(String id) {
        return (NetObject) this.netElements.get(id);
    }

    /**
     * Gets the declaration text for the Petri Net.
     *
     * @return The declaration text.
     */
    public String getDeclarationText() {
        return declarationText;
    }

    /**
     * Sets the declaration text for the Petri Net.
     *
     * @param declarationText The declaration text to set.
     */
    public void setDeclarationText(String declarationText) {
        this.declarationText = declarationText;
    }

    /**
     * Gets the import text for the Petri Net.
     *
     * @return The import text.
     */
    public String getImportText() {
        return importText;
    }

    /**
     * Sets the import text for the Petri Net.
     *
     * @param importText The import text to set.
     */
    public void setImportText(String importText) {
        this.importText = importText;
    }

    /**
     * Gets the implement text for the Petri Net.
     *
     * @return The implement text.
     */
    public String getImplementText() {
        return implementText;
    }

    /**
     * Sets the implement text for the Petri Net.
     *
     * @param implementText The implement text to set.
     */
    public void setImplementText(String implementText) {
        this.implementText = implementText;
    }
}